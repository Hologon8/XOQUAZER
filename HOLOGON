<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quantum Study Calculator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f9;
      color: #333;
    }
    h1 {
      text-align: center;
      padding: 20px;
      background: linear-gradient(to right, #007bff, #00c6ff);
      color: white;
      margin: 0;
      font-size: 2rem;
    }
    .container {
      max-width: 1200px;
      margin: 20px auto;
      padding: 20px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }
    .input-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      font-weight: bold;
      margin-bottom: 5px;
    }
    input, textarea {
      width: 100%;
      padding: 8px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
    button {
      background-color: #007bff;
      color: white;
      padding: 10px 15px;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-right: 10px;
    }
    button:hover {
      background-color: #0056b3;
    }
    .visual-container {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      justify-content: center;
    }
    canvas {
      width: 100%;
      max-width: 600px;
      margin: 20px auto;
    }
    #threeContainer {
      width: 600px;
      height: 400px;
      margin: 0 auto;
      border: 1px solid #ccc;
    }
    .graphic-title {
      text-align: center;
      font-size: 1.2rem;
      color: #007bff;
      margin: 10px 0;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    table th, table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: center;
    }
    table th {
      background-color: #007bff;
      color: white;
    }
  </style>
</head>
<body>
  <h1>Quantum Study Calculator</h1>
  <div class="container">
    <!-- Algebra Equation Input -->
    <div class="input-group">
      <label for="algebraEquation">Enter Algebra Equation (e.g., E=mc^2):</label>
      <textarea id="algebraEquation" rows="2" placeholder="Type your equation here"></textarea>
    </div>
    <div class="input-group">
      <button id="solveEquation">Solve Equation</button>
      <div id="algebraResult"></div>
    </div>

    <hr>

    <!-- Zero-Point Energy Calculator -->
    <div class="input-group">
      <label for="mass">Mass (m) in kilograms:</label>
      <input type="number" id="mass" placeholder="Enter mass in kg">
    </div>
    <div class="input-group">
      <label for="branchFactor">Branching Factor (k):</label>
      <input type="number" step="0.01" id="branchFactor" value="0.02">
    </div>
    <div class="input-group">
      <label for="iterations">Number of Iterations (n):</label>
      <input type="number" id="iterations" value="50">
    </div>
    <button id="calculateBranching">Calculate Zero-Point Energy</button>
    <table>
      <thead>
        <tr>
          <th>Iteration (n)</th>
          <th>Energy (E) in Joules</th>
        </tr>
      </thead>
      <tbody id="resultsTable"></tbody>
    </table>

    <!-- Visualization -->
    <div class="graphic-title">Energy Evolution (2D and 3D Visualizations)</div>
    <div class="visual-container">
      <canvas id="resultsChart"></canvas>
      <div id="threeContainer"></div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    // Solve Algebra Equation
    document.getElementById("solveEquation").addEventListener("click", () => {
      const equation = document.getElementById("algebraEquation").value;
      if (!equation) {
        alert("Please enter a valid equation.");
        return;
      }

      try {
        const result = eval(equation.replace("=", "").replace("^", "**"));
        document.getElementById("algebraResult").innerText = `Result: ${result}`;
      } catch (e) {
        document.getElementById("algebraResult").innerText = "Invalid equation.";
      }
    });

    // Zero-Point Energy Calculator
    document.getElementById("calculateBranching").addEventListener("click", () => {
      const mass = parseFloat(document.getElementById("mass").value);
      const branchFactor = parseFloat(document.getElementById("branchFactor").value);
      const iterations = parseInt(document.getElementById("iterations").value);

      if (isNaN(mass) || mass <= 0) {
        alert("Please enter a valid mass greater than 0.");
        return;
      }

      const speedOfLight = 299792458; // Speed of light in m/s
      const energyBase = mass * speedOfLight ** 2; // E = mc^2

      const resultsTable = document.getElementById("resultsTable");
      resultsTable.innerHTML = "";

      const values = [];
      let currentEnergy = energyBase;

      for (let n = 0; n <= iterations; n++) {
        resultsTable.innerHTML += `<tr><td>${n}</td><td>${currentEnergy.toExponential(5)} J</td></tr>`;
        values.push({ x: n, y: currentEnergy });
        currentEnergy = currentEnergy * (1 + branchFactor);
      }

      drawChart(values);
      draw3DVisualization(values);
    });

    function drawChart(data) {
      const ctx = document.getElementById("resultsChart").getContext("2d");
      const labels = data.map(point => point.x);
      const values = data.map(point => point.y);

      new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [{
            label: "Energy Evolution (E=mcÂ² branching)",
            data: values,
            borderColor: "#007bff",
            borderWidth: 2,
            fill: false
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              display: true
            }
          },
          scales: {
            x: {
              title: {
                display: true,
                text: "Iteration (n)"
              }
            },
            y: {
              title: {
                display: true,
                text: "Energy (E) in Joules"
              }
            }
          }
        }
      });
    }

    function draw3DVisualization(data) {
      const container = document.getElementById("threeContainer");
      container.innerHTML = ""; // Clear previous content

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer();
      renderer.setSize(container.clientWidth, container.clientHeight);
      container.appendChild(renderer.domElement);

      const axesHelper = new THREE.AxesHelper(5);
      scene.add(axesHelper);

      const points = data.map((point, index) => {
        const angle = index * 0.2;
        const radius = Math.sqrt(point.y) / 1e10;
        return new THREE.Vector3(radius * Math.cos(angle), radius * Math.sin(angle), index * 0.1);
      });

      const geometry = new THREE.BufferGeometry().setFromPoints(points);
      const material = new THREE.LineBasicMaterial({ color: 0x007bff });
      const line = new THREE.Line(geometry, material);
      scene.add(line);

      camera.position.z = 10;

      function animate() {
        requestAnimationFrame(animate);
        line.rotation.z += 0.01;
        renderer.render(scene, camera);
      }

      animate();
    }
  </script>
</body>
</html>
